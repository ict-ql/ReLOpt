#include "GenFuncTrainData.h"
#include "GenAnalysisTrainData.h"
#include "GenEachFuncStatusAfterPass.h"
#include "GenActionModelTrainData.h"
#include "BBLevelUnopt2Opt.h"
#include "AttributeAnalysis.h"
#include "Prepare.h"
#include "utils.h"
#include "CollectModuleAnalysisInfo.h"
#include "splitLongBBForPrompt.h"
#include "FilterRegionSimilarToTarget.h"

#include <json/json.h>
#include <iostream>
#include "llvm/Support/CommandLine.h"
#include "llvm/IR/PassManager.h"
#include "llvm/Transforms/Scalar.h"
#include "llvm/IR/LegacyPassManager.h"

using namespace llvm;

static cl::opt<bool>
    GenFuncTrainData("gen-func-train-data",
                       cl::desc("In Generate Func train data mod."),
                       cl::init(false), cl::Hidden);
static cl::opt<bool>
    GenFunDataFromExebench("gen-func-data-from-exebench",
                       cl::desc("In Generate Func data mod (from exebench)."),
                       cl::init(false), cl::Hidden);
static cl::list<std::string>
    InputFilePaths("input-file-path",
            cl::desc("The input file path"),
            cl::CommaSeparated, cl::Hidden);
static cl::opt<std::string>
    InputFileDir("input-file-dir",
            cl::desc("The dir stores input file"),
            cl::CommaSeparated, cl::Hidden);
static cl::opt<std::string> 
    OutputFilePath("output-file-path",
            cl::desc("The output file path"),
            cl::Hidden);

static cl::opt<std::string> 
    OutputFileDir("output-file-dir",
            cl::desc("When we may generate several output file, we only need to pass the dir to the tool."),
            cl::Hidden);

static cl::opt<bool>
    ProcessSplitPassLogFile("process-split-pass-log-file",
                                cl::desc("In Process Log File mod."),
                                cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenAnalysisInfo("gen-analysis-info-train-data",
                        cl::desc("Generate analysis info for training."),
                        cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenJustFuncIRFromModuleIR("gen-just-func-ir-from-module-ir",
                                cl::desc("Generate just function ir from module ir."),
                                cl::init(false), cl::Hidden);

static cl::opt<bool>
    GetChangeIRFunc("get-changeIR-func",
                                cl::desc("Get the functions, which change IR. The OutPutFile stores the function name list."),
                                cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenEachFuncStatusAfterPass("gen-func-status-after-pass",
                                cl::desc("Generate each changed function status after pass. Input is log file generated by '-print-changed -print-module-scope', and each function has a outfile(json)."),
                                cl::init(false), cl::Hidden);

static cl::opt<bool>
    SimplifiedAttributeAnalysis("attribute-analysis",
                        cl::desc("Analysis the bitcode of LLVM project(input), and output the attribute(Simplified)."),
                        cl::init(false), cl::Hidden);

static cl::opt<int>
    InstThreshold("inst-theshold-in-BB",
                        cl::desc("Each BB must not contain instructions more than the theshold."),
                        cl::init(10), cl::Hidden);

static cl::opt<std::string>
    FocusFuncFilePath("focus-func-list-path",
            cl::desc("Only filter the call graph that the root node's func name is in the file."),
            cl::Hidden);

static cl::opt<std::string>
    BasicAPIFilePath("basic-api-file-path",
            cl::desc("The file path of basic api."),
            cl::Hidden);


static cl::opt<bool>
    GenActionModelTrainData("gen-action-model-train-data",
                        cl::desc("Generate action model train data."),
                        cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenBBLevelTrainData("gen-bb-level-train-data",
                        cl::desc("Generate BB level train data."),
                        cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenTrainDataWithSmallerBB("gen-train-data-with-smaller-bb",
                        cl::desc("Generate smaller BB train data."),
                        cl::init(false), cl::Hidden);

static cl::opt<bool>
    GenVecTrainDataWithSmallerBB("gen-vec-train-data-with-smaller-bb",
                        cl::desc("Generate smaller BB train data for vectorize."),
                        cl::init(false), cl::Hidden);

static cl::opt<bool>
    FilterLoopIRBySimilarityOfTarget("filter-loop-ir-by-similarity-of-target",
                        cl::desc("Only leave the loop that similar to target."),
                        cl::init(false), cl::Hidden);
static cl::opt<std::string>
    TargetVecPath("target-file-path",
            cl::desc("The target loop vector."),
            cl::Hidden);
static cl::opt<std::string>
    VocabPath("vocab-file-path",
            cl::desc("The path of vocabulary."),
            cl::Hidden);
static cl::opt<double>
    SimliarityThreshold("similarity-theshold",
                        cl::desc("less than the theshold, we consider it similar."),
                        cl::init(0.05), cl::Hidden); //@TODO: we need give a threshold

int main(int argc, char **argv){
    cl::ParseCommandLineOptions(argc, argv);
    if(GenFuncTrainData){
        genFunctionTrainData(InputFilePaths, OutputFilePath);
    }
    else if (GenFunDataFromExebench){
        assert(InputFilePaths.size() == 1);
        genFunctionTrainData(InputFilePaths[0], OutputFilePath);
        // assert(0);
    }
    else if(ProcessSplitPassLogFile){
        processSplitPassData(InputFilePaths, OutputFilePath);
    }
    else if(GenAnalysisInfo){
        genAnalysisInfoTrainData(InputFilePaths, OutputFileDir);
    }
    else if(GenJustFuncIRFromModuleIR){
        assert(InputFilePaths.size() == 1);
        //输入ModuleIR.ll输出json文件，key是function的名字，value是functionIR
        genJustFuncIRFromModuleIR(InputFilePaths[0], OutputFilePath);
    }
    else if(GenEachFuncStatusAfterPass){
        assert(InputFilePaths.size() == 1);
        genEachFuncStatusAfterPass(InputFilePaths[0], OutputFileDir);
    }
    else if(GetChangeIRFunc){
        assert(InputFilePaths.size() == 1);
        getChangeIRFunc(InputFilePaths[0], OutputFilePath);
    }
    else if(SimplifiedAttributeAnalysis){
        assert(InputFilePaths.size() == 1);
        runAttributeAnalysis(InputFilePaths[0], FocusFuncFilePath, BasicAPIFilePath, OutputFilePath);
    }
    else if(GenActionModelTrainData){
        assert(InputFilePaths.size() == 1);
        genRawTrainDataForPrompt(InputFilePaths[0], OutputFilePath);
    }
    else if(GenBBLevelTrainData){
        assert(InputFilePaths.size() == 1);
        genUnoptBB2OptForPrompt(InputFilePaths[0], OutputFilePath);
    }
    else if(GenTrainDataWithSmallerBB){
        assert(InputFilePaths.size() == 1);
        genUnopt2OptWithSmallerBBForPrompt(InputFilePaths[0], OutputFilePath, InstThreshold);
    }
    else if(GenVecTrainDataWithSmallerBB){
        assert(InputFilePaths.size() == 1);
        genUnopt2OptWithSmallerBBForVecPrompt(InputFilePaths[0], OutputFilePath, InstThreshold);
    }
    else if(FilterLoopIRBySimilarityOfTarget){
        filterLoopAccordingToSimilarity(InputFileDir, TargetVecPath, 
                                        VocabPath, OutputFileDir, 
                                        SimliarityThreshold);
    }
    else{ // For debug
        runCollectModuleAnalysisInfoTest(InputFilePaths[0]);
    }
    
    return 0;
}